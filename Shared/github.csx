using System;
using System.Linq;
using Octokit;
using System.Configuration;

public class GitHub
{
    private const string OWNER = "YorkDevelopers";
    private const string REPRO = "yorkdevelopers.github.io";
    private const string BRANCH = "master";

    private readonly GitHubClient gitHubClient;
    private readonly TraceWriter log;

    //C'tor for application oauth logins
    public GitHub(TraceWriter log)
    {
        // Set up our credentials to access git hub
        var token = ConfigurationManager.AppSettings["GITHUBTOKEN"];
        this.gitHubClient = new GitHubClient(new ProductHeaderValue("yorkDevelopersFeed"));
        this.gitHubClient.Credentials = new Credentials(token);

        this.log = log;
    }

    //C'tor for when we have the an user's OAUTH access token
    public GitHub(TraceWriter log, string accessToken)
    {
        // Set up our credentials to access git hub
        this.gitHubClient = new GitHubClient(new ProductHeaderValue("yorkDevelopersFeed"));
        this.gitHubClient.Credentials = new Credentials(accessToken);

        this.log = log;
    }

    /// <summary>
    /// Creates/Updates the specified file on GitHub
    /// </summary>
    /// <param name="filename"></param>
    /// <param name="contents"></param>
    public void WriteFileToGitHub(string filename, string contents)
    {
        log.Info($"Writing file to GitHub {filename}");
        try
        {
            // try to get the file (and with the file the last commit sha)
            var existingFile = gitHubClient.Repository.Content.GetAllContentsByRef(OWNER, REPRO, filename, BRANCH).Result;

            var updateChangeSet = gitHubClient.Repository.Content.UpdateFile(
                    OWNER,
                    REPRO,
                    filename,
                    new UpdateFileRequest("Latest Autogenerated file - " + System.DateTime.Now,
                                            contents,
                                            existingFile.First().Sha, BRANCH)).Result;
        }
        catch (AggregateException ae)
        {
            ae.Handle((x) =>
            {
                if (x is Octokit.NotFoundException)
                {
                    // if file is not found, create it
                    var createChangeSet = gitHubClient.Repository.Content.CreateFile(
                                        OWNER,
                                        REPRO,
                                        filename,
                                        new CreateFileRequest("First Autogenerated file - " + System.DateTime.Now,
                                                                contents)).Result;
                    return true;
                }
                return false; // Let anything else stop the application.
            });

        }
    }


    /// <summary>
    /// Creates/Updates the specified file on GitHub
    /// </summary>
    /// <param name="filename"></param>
    /// <param name="contents"></param>
    public async Task WriteFileToGitHubAsync(string filename, string contents)
    {
        log.Info($"Writing file to GitHub {filename}");
        try
        {
            // try to get the file (and with the file the last commit sha)
            var existingFile =await gitHubClient.Repository.Content.GetAllContentsByRef(OWNER, REPRO, filename, BRANCH);

            var updateChangeSet = await gitHubClient.Repository.Content.UpdateFile(
                    OWNER,
                    REPRO,
                    filename,
                    new UpdateFileRequest("Latest Autogenerated file - " + System.DateTime.Now,
                                            contents,
                                            existingFile.First().Sha, BRANCH));
        }
        catch (AggregateException ae)
        {
            ae.Handle(async (x) =>
            {
                if (x is Octokit.NotFoundException)
                {
                    // if file is not found, create it
                    var createChangeSet = await gitHubClient.Repository.Content.CreateFile(
                                        OWNER,
                                        REPRO,
                                        filename,
                                        new CreateFileRequest("First Autogenerated file - " + System.DateTime.Now,
                                                                contents));
                    return true;
                }
                return false; // Let anything else stop the application.
            });

        }
    }

    /// <summary>
    /// Reads the contents of an existing file on github.  Returns "" if the file 
    /// does not currently exist.
    /// </summary>
    /// <param name="filename">For example _data/Events.yml</param>
    /// <returns></returns>
    public string ReadFileFromGitHub(string filename)
    {
        try
        {
            // try to get the file (and with the file the last commit sha)
            var existingFile = gitHubClient.Repository.Content.GetAllContentsByRef(OWNER, REPRO, filename, BRANCH).Result;
            return existingFile.First().Content;
        }
        catch (AggregateException ae)
        {
            ae.Handle((x) =>
            {
                if (x is Octokit.NotFoundException)
                {
                    return true;
                }
                return false; // Let anything else stop the application.
            });

        }

        return "";
    }

    /// <summary>
    /// Reads the contents of an existing file on github.  Returns "" if the file 
    /// does not currently exist.
    /// </summary>
    /// <param name="filename">For example _data/Events.yml</param>
    /// <returns></returns>
    public async Task<string> ReadFileFromGitHubAsync(string filename)
    {
        try
        {
            // try to get the file (and with the file the last commit sha)
            var existingFile = await gitHubClient.Repository.Content.GetAllContentsByRef(OWNER, REPRO, filename, BRANCH);
            return existingFile.First().Content;
        }
        catch (AggregateException ae)
        {
            ae.Handle((x) =>
            {
                if (x is Octokit.NotFoundException)
                {
                    return true;
                }
                return false; // Let anything else stop the application.
            });

        }

        return "";
    }

}
